AWSTemplateFormatVersion: '2010-09-09'
Resources:
  CFNLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: picSearchCFN
      Handler: LF2.lambda_handler
      Role:
        'Fn::GetAtt':
          - CFNLambdaRole
          - Arn
      Code:
        S3Bucket: photo-search-project-2
        S3Key: LF2.zip
      Runtime: python3.9
      Timeout: 300
      Layers:
        - !Ref lambdaLayerCFN
  lambdaLayerCFN:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.9
      Content:
        S3Bucket: photo-search-project-2
        S3Key: lambda_packages/python.zip
      Description: Lambda layer for requests auth
      LayerName: lambda_layer_cfn
      LicenseInfo: MIT
  CFNLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: cfn_lambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AWSLambdaBasicExecutionRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
        - PolicyName: AmazonS3FullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 's3:*'
                Resource:
                  - 'arn:aws:s3:::photo-search-project-2'
                  - 'arn:aws:s3:::photo-search-project-2/*'
        - PolicyName: AmazonLexFullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'lex:*'
                Resource: '*'
# The OrderFlower bot consists of the following:
# 1. IAM role that is used by the bot at runtime
# 2. Inline Bot
# 3. Bot Version
# 4. Alias
  # 1. IAM Role used by the Lex service to make runtime calls
  BotRuntimeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lexv2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LexRuntimeRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "polly:SynthesizeSpeech"
                  - "comprehend:DetectSentiment"
                Resource: "*"
 
  # 2. Inline bot definition that depends on the IAM role.
  # The bot definition consists of combining all the child resources into one CFN resource.
  # This includes Locales, Intents, Slots, and SlotTypes.
  PhotoSearchCFNBot:
    DependsOn: BotRuntimeRole
    Type: AWS::Lex::Bot
    Properties:
      Name: "PhotoSearchWithCFN"
      RoleArn: !GetAtt BotRuntimeRole.Arn
      DataPrivacy:
        ChildDirected: false
      IdleSessionTTLInSeconds: 300
      Description: "How to create a PhotoSearch bot with CFN"
      # We provide a setting that allows you to auto build the locales provided.
      # Locale builds are also kicked off if you attempt to create a bot version 
      # that depends on an unbuilt locale.
      AutoBuildBotLocales: false
      BotLocales:
        - LocaleId: "en_US"
          Description: "Book a trip bot Locale"
          NluConfidenceThreshold: 0.40
          VoiceSettings:
            VoiceId: "Ivy"
          SlotTypes:
            - Name: "PhotoTypes"
              Description: "Slot Type description"
              SlotTypeValues:
                - SampleValue:
                    Value: cats
                - SampleValue:
                    Value: dogs
                - SampleValue:
                    Value: birds
                - SampleValue:
                    Value: trees
              ValueSelectionSetting:
                ResolutionStrategy: ORIGINAL_VALUE
          Intents:
            - Name: "SearchIntent"
              Description: "Intent to search photos"
              SampleUtterances:
                - Utterance: "show me {PhotoType}"
                - Utterance: "show me photos with {PhotoType} in them"
              SlotPriorities:
                - Priority: 1
                  SlotName: PhotoType
              Slots:
                - Name: "PhotoType"
                  Description: "something"
                  SlotTypeName: "PhotoTypes"
                  ValueElicitationSetting:
                    SlotConstraint: "Required"
                    PromptSpecification:
                      MessageGroupsList:
                        - Message:
                            PlainTextMessage:
                              Value: "What type of photos do you want to search?"
                      MaxRetries: 3
                      AllowInterrupt: false
            - Name: "FallbackIntent"
              Description: "Default intent when no other intent matches"
              ParentIntentSignature: "AMAZON.FallbackIntent"
 
  # 3. Define a bot version that depends on the DRAFT version of the Lex Bot.
  PhotoSearchCFNBotVersionWithCFN:
    DependsOn: PhotoSearchCFNBot
    Type: AWS::Lex::BotVersion
    Properties:
      BotId: !Ref PhotoSearchCFNBot
      BotVersionLocaleSpecification:
        - LocaleId: en_US
          BotVersionLocaleDetails:
            SourceBotVersion: DRAFT
      Description: PhotoSearch Version
 
  # 4. Define the alias by providing the bot version created by the 
  #    AWS::Lex::BotVersion resource above.
  FirstBotAliasWithCFN:
    DependsOn: PhotoSearchCFNBotVersionWithCFN
    Type: AWS::Lex::BotAlias
    Properties:
      BotId: !Ref PhotoSearchCFNBot
      BotAliasName: "PhotoSearchProd"
      BotVersion: !GetAtt PhotoSearchCFNBotVersionWithCFN.BotVersion
      SentimentAnalysisSettings:
        DetectSentiment: true
